renv::init()
for(i in 100:1000){
vec[i] <- i / 2
}
vec <- c()
for(i in 100:1000){
vec[i] <- i / 2
}
vec
## Apply-family
res_vec <- sapply(100:1000, fucntion(x){x / 2})
res_vec <- sapply(100:1000, function(x){
x / 2
})
res_vec
res_vec <- sapply(100:1000, div_2)
div_2 <- function(x){x / 2}
res_vec <- sapply(100:1000, div_2)
res_vec <- sapply(100:1000, paste_z)
res_vec <- sapply(100:1000, div_2)
head(res_vec)
as.character(1:10 / 2)
vec <- c()
for(i in 10:20){
vec[i] <- i / 2
print(paste("The current i:", i))
}
# create sample data
sample_data<- data.frame( x=c(1,2,3,4,5,6),
y=c(3,2,4,2,34,5))
# create sample data
sample_data<- data.frame( x=c(1,2,3,4,5,6),
y=c(3,2,4,2,34,5))
vec <- c()
for(i in 1:ncol(sample_data)){
vec[i] <- max(sample_data[, i])
}
vec
vec
# create sample data
sample_data<- data.frame( x=c(10:100),
y=c(100:190))
vec <- c()
for(i in 1:ncol(sample_data)){
vec[i] <- max(sample_data[, i])
}
vec
# create sample data
sample_data<- data.frame( x=c(10:100),
y=c(100:190))
vec <- c()
for(i in 1:ncol(sample_data)){
vec[i] <- median(sample_data[, i])
}
vec
res_vec <- sapply(sample_data, median)
res_vec
# install.packages("tidyverse")
# install.packages("here")
library(tidyverse)
library(here)
athletes <- readRDS(file = here::here("raw_data", "athletes.rds"))
exple_list <- list(c(1:10),
c(100:400),
c(80:97)
)
example_list <- list(c(1:10),
c(100:400),
c(80:97)
)
str(example_list)
styler:::style_active_file()
for(i in 1: length(example_list)){
vec_sum[i] <- sum(example_list[[i]])
}
vec_sum <- c()
for(i in 1: length(example_list)){
vec_sum[i] <- sum(example_list[[i]])
}
vec_sum
vec_sum <- sapply(example_list, sum)
vec_sum
?sum
example_list <- list(
"vec_1" = c(1:10),
"vec_2" = c(100:400),
"vec_3" = c(80:97, NA)
)
str(example_list)
vec_sum <- c()
for(i in 1: length(example_list)){
vec_sum[i] <- sum(example_list[[i]], na.rm = TRUE)
}
vec_sum
vec_sum <- sapply(example_list, sum)
vec_sum
vec_sum <- sapply(example_list, sum, TRUE)
vec_sum
vec_sum <- sapply(example_list, sum, na.rm = TRUE)
vec_sum
print_sum <- function(vec){
res_sum <- sum(x, na.rm = TRUE)
print(res_sum)
return(res_sum)
}
vec_sum <- sapply(example_list, print_sum)
print_sum <- function(vec){
res_sum <- sum(vec, na.rm = TRUE)
print(res_sum)
return(res_sum)
}
vec_sum <- sapply(example_list, print_sum)
vec_sum
?sapply
vapply(example_list, print_sum, numeric(1))
vapply(example_list, print_sum, character(1))
vapply(example_list, print_sum, integer(1))
vapply(example_list, print_sum, float(1))
integer(1)
vapply(example_list, print_sum, character(1))
lapply(example_list, print_sum)
nycflights13::flights
data()
flights <- nycflights13::flights
for(i in 1:ncol(flights)){
typeof(flights[, i])
}
for(i in 1:ncol(flights)){
type <- typeof(flights[, i])
print(type)
}
for(i in 1:ncol(flights)){
type <- class(flights[, i])
print(type)
}
str(flights)
for(i in 1:ncol(flights)){
type <- class(flights[i])
print(type)
}
for(i in 1:ncol(flights)){
type <- typeof(flights[i])
print(type)
}
i = 1
str(flights)
is.numeric(flights[,i])
is.numeric(flights[,i][1])
is.numeric(flights[[i]])
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
} else{
return(typeof(flights[[i]]))
}
}
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
} else{
print(typeof(flights[[i]]))
}
}
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
} else{
print(class(flights[[i]]))
}
}
vec_median <- c
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
str(flights)
i <- 10
is.numeric(flights[[i]])
for(i in 1:ncol(flights)){
print(i)
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
i <- 1
median(flights[, i])
?median
flights[, i]
median(flights[[i]])
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[[i]])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
vec_median <- c
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[[i]])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
flights <- as.data.frame(nycflights13::flights)
vec_median <- c
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
vec_median <- c
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
# Chunk 1
example_list <- list(
"vec_1" = c(1:10),
"vec_2" = c(100:400),
"vec_3" = c(80:97, NA)
)
str(example_list)
# Chunk 2
vec_sum <- c()
for(i in 1: length(example_list)){
vec_sum[i] <- sum(example_list[[i]], na.rm = TRUE)
}
vec_sum
# Chunk 3
vec_sum <- sapply(example_list, sum)
vec_sum
# Chunk 4
vec_sum <- sapply(example_list, sum, na.rm = TRUE)
vec_sum
# Chunk 5
vec_sum <- sapply(example_list, function(x){
res_sum <- sum(x, na.rm = TRUE)
print(res_sum)
return(res_sum)
})
# Chunk 6
print_sum <- function(vec){
res_sum <- sum(vec, na.rm = TRUE)
print(res_sum)
return(res_sum)
}
vec_sum <- sapply(example_list, print_sum)
vec_sum
# Chunk 7
sapply(example_list, print_sum)
# Chunk 8
vapply(example_list, print_sum, integer(1))
# Chunk 9
vapply(example_list, print_sum, character(1))
vec_median <- c
for(i in 1:ncol(flights)){
print(flights[, i])
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
str(flights)
is.numeric(flights$time_hour)
vec_median <- c
for(i in 1:ncol(flights)){
print(i)
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
str(flights)
i <- 1
median(flights[, i])
vec_median <- c
for(i in 1:ncol(flights)){
print(i)
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
ncol(flights)
1:ncol(flights)
i = 2
median(flights[, i])
vec_median <- c()
for(i in 1:ncol(flights)){
print(i)
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
vec_median <- c()
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i])
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
vec_median
vec_median <- c()
for(i in 1:ncol(flights)){
if(is.numeric(flights[[i]])){
vec_median[i] <- median(flights[, i], na.rm = TRUE)
} else{
vec_median[i] <- typeof(flights[[i]])
}
}
vec_median
links <- ""
links <- ""
links[1] <- "[eatPrep](eatPrep.qmd)"
links[2] <- "[eatModel](eatModal.qmd)"
links[3] <- "[eatRep](eatRep.qmd)"
links[4] <- "[eatGADS](eatGADS.qmd)"
links[5] <- "[eatTools](eatTools.qmd)"
links[6] <- "[eatAnalysis](eatAnalysis.qmd)"
links[7] <- "[eatATA](eatATA.qmd)"
links[8] <- "[eatFDZ](eatFDZ.qmd)"
links[9] <- "[eatCodebook](eatCodebook.qmd)"
links[10]<- "[eatRecode](eatRecode.qmd)"
links[10]<- "[eatRecode](eatRecode.qmd)"
links[11]<- "[eatPlot](eatPlot.qmd)"
links
Paketname <- c("eatPrep", "eatModel", "eatRep", "eatGADS", "eatTools",
"eatAnalysis", "eatATA", "eatFDZ", "eatCodebook", "eatRecode",
"eatPlot")
links <- ""
links[1] <- "[eatPrep](eatPrep.qmd)"
links[2] <- "[eatModel](eatModal.qmd)"
links[3] <- "[eatRep](eatRep.qmd)"
links[4] <- "[eatGADS](eatGADS.qmd)"
links[5] <- "[eatTools](eatTools.qmd)"
links[6] <- "[eatAnalysis](eatAnalysis.qmd)"
links[7] <- "[eatATA](eatATA.qmd)"
links[8] <- "[eatFDZ](eatFDZ.qmd)"
links[9] <- "[eatCodebook](eatCodebook.qmd)"
links[10]<- "[eatRecode](eatRecode.qmd)"
links[11]<- "[eatPlot](eatPlot.qmd)"
desc <- ""
desc[1] <- "Aufbereitung von Datensätzen."
desc[2] <- "Interface für die Software ConQuest."
desc[3] <- "berechnet Kennwerte für Daten mit geclusterten Mehrebenenstrukturen mit imputierten Daten."
desc[4] <- "Import und Datenaufbereitung von SPSS Datensätzen in R."
desc[5] <- "verschiedene Hilfsfunktionen, die unter anderem auch von den Paketen 'eatPrep', 'eatModel', 'eatGADS' und 'eatRep' benötigt werden."
desc[6] <- "verschiedene nützliche Hilfsfunktionen, wie zum Speichern von Excel-Datein, Speichern von Analyse-Ergebnissen von lm4 und Simulieren von IRT-Responses."
desc[7] <- "automatisierte Blockbesetzung/automatisierte Testhefterstellung."
desc[8] <- "automatisierte Anonymisierung von Datensätzen, Abgleich von pdf-Dokumenten (zB Skalenhandbüchern) und Datensätzen."
desc[9] <- "automatisierte Erstellung von Skalenhandbüchern."
desc[10]<- "Erstellen und Anwenden von Rekodierungsdatenbanken"
desc[11]<- "Erstellen von Plots aus dem eatRep output (Hauptanwendungsfall: Bildungstrend)."
df <- data.frame(links, desc)
df
# find out how to print nicer
df_layout <- df
colnames(df_layout) <- c("Paketname", "Kurzbeschreibung")
#df_layout
knitr::kable(df_layout)
descFunktion_ata <- "automatisierte Blockbesetzung/automatisierte Testhefterstellung."
descFunktion_ata <- "automatisierte Blockbesetzung/automatisierte Testhefterstellung."
doku_ata <- "see CRAN page for several vignettes"
table <- data.frame(descFunktion_ata, doku_ata)
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table)
doku_ata <- c("see CRAN page for several vignettes", "test")
table <- data.frame(descFunktion_ata, doku_ata)
table <- data.frame(descFunktion_ata, doku_ata)
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table)
?data.frame
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table) # zeigt aktuell desc 2 mal an.
t <- data.frame("a", "b")
t
descFunktion_ata <- "automatisierte Blockbesetzung/automatisierte Testhefterstellung."
doku_ata <- c("see CRAN page for several vignettes", "test")
t$X.a. <- descFunktion_ata
t$X.a. <- descFunktion_ata
t$X.b. <- doku_ata
descFunktion_ata <- c("automatisierte Blockbesetzung/automatisierte Testhefterstellung.", "")
doku_ata <- c("see CRAN page for several vignettes", "test")
doku_ata <- c("see CRAN page for several vignettes", "test")
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
table
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table) # zeigt aktuell desc 2 mal an.
doku_ata <- c("see CRAN page for several vignettes", "test", "test")
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
knitr::kable(table) # zeigt aktuell desc 2 mal an.
doku_ata <- c("see CRAN page for several vignettes", "test", "test")
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table) # zeigt aktuell desc 2 mal an.
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
descFunktion_ata <- c("automatisierte Blockbesetzung/automatisierte Testhefterstellung.", "")
doku_ata <- c("see CRAN page for several vignettes", "test", "test")
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table) # zeigt aktuell desc 2 mal an.
descFunktion_ata <- c("automatisierte Blockbesetzung/automatisierte Testhefterstellung.", "", "")
doku_ata <- c("see CRAN page for several vignettes", "test", "test")
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table) # zeigt aktuell desc 2 mal an.
descFunktion_ata <- c("automatisierte Blockbesetzung/automatisierte Testhefterstellung. blablakdjöasldkfj ölskadjf ölaskdfjösalkfj söalkfj söadlkfj söaldkfj ", "", "")
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table) # zeigt aktuell desc 2 mal an.
descFunktion_ata <- c("automatisierte Blockbesetzung/automatisierte Testhefterstellung. blablakdjöasldkfj ölskadjf ölaskdfjösalkfj söalkfj söadlkfj söaldkfj blablakdjöasldkfj ölskadjf ölaskdfjösalkfj söalkfj söadlkfj söaldkf", "", "")
doku_ata <- c("see CRAN page for several vignettes", "test", "test")
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table) # zeigt aktuell desc 2 mal an.
descFunktion_ata <- c("automatisierte Blockbesetzung/automatisierte Testhefterstellung.", "", "", "")
doku_ata <- c("[typical use of 'eat ATA': a Minimal Example](https://cran.r-project.org/web/packages/eatATA/vignettes/minimal_example.html)", "['eatATA' Functionality](https://cran.r-project.org/web/packages/eatATA/vignettes/overview.html)", "[a Pilot Study Example](https://cran.r-project.org/web/packages/eatATA/vignettes/use_case_pilot_study.html)", "[Reference manual](https://cran.r-project.org/web/packages/eatATA/eatATA.pdf)")
table <- data.frame(descFunktion_ata, doku_ata, check.rows = FALSE)
colnames(table) <- c("Funktionsbeschreibung", "Dokumentation")
knitr::kable(table) # keine schöne Ansicht, aber ok
doku_prep <- "internal"
doku_prep <- "internal"
table <- data.frame(doku_prep, check.rows = FALSE)
colnames(table) <- "Dokumentation"
knitr::kable(table)
# **Documentation:** [Info page with several vignettes](https://cran.r-project.org/web/packages/eatGADS/)
doku_gads <- "[Info page with several vignettes](https://cran.r-project.org/web/packages/eatGADS/)"
# **Documentation:** [Info page with several vignettes](https://cran.r-project.org/web/packages/eatGADS/)
doku_gads <- "[Info page with several vignettes](https://cran.r-project.org/web/packages/eatGADS/)"
table <- data.frame(doku_gads, check.rows = FALSE)
colnames(table) <- "Documentation"
colnames(table) <- "Documentation"
knitr::kable(table)
# **Dokumentation:** [typical use of 'eat ATA': a Minimal Example](https://cran.r-project.org/web/packages/eatATA/vignettes/minimal_example.html), ['eatATA' Functionality](https://cran.r-project.org/web/packages/eatATA/vignettes/overview.html), [a Pilot Study Example](https://cran.r-project.org/web/packages/eatATA/vignettes/use_case_pilot_study.html), [Reference manual](https://cran.r-project.org/web/packages/eatATA/eatATA.pdf)
doku_ata <- c("[typical use of 'eat ATA': a Minimal Example](https://cran.r-project.org/web/packages/eatATA/vignettes/minimal_example.html)", "['eatATA' Functionality](https://cran.r-project.org/web/packages/eatATA/vignettes/overview.html)", "[a Pilot Study Example](https://cran.r-project.org/web/packages/eatATA/vignettes/use_case_pilot_study.html)", "[Reference manual](https://cran.r-project.org/web/packages/eatATA/eatATA.pdf)")
# **Dokumentation:** [typical use of 'eat ATA': a Minimal Example](https://cran.r-project.org/web/packages/eatATA/vignettes/minimal_example.html), ['eatATA' Functionality](https://cran.r-project.org/web/packages/eatATA/vignettes/overview.html), [a Pilot Study Example](https://cran.r-project.org/web/packages/eatATA/vignettes/use_case_pilot_study.html), [Reference manual](https://cran.r-project.org/web/packages/eatATA/eatATA.pdf)
doku_ata <- c("[typical use of 'eat ATA': a Minimal Example](https://cran.r-project.org/web/packages/eatATA/vignettes/minimal_example.html)", "['eatATA' Functionality](https://cran.r-project.org/web/packages/eatATA/vignettes/overview.html)", "[a Pilot Study Example](https://cran.r-project.org/web/packages/eatATA/vignettes/use_case_pilot_study.html)", "[Reference manual](https://cran.r-project.org/web/packages/eatATA/eatATA.pdf)")
table <- data.frame(doku_ata, check.rows = FALSE)
table <- data.frame(doku_ata, check.rows = FALSE)
colnames(table) <- c("Documentation")
knitr::kable(table) # keine schöne Ansicht, aber ok
